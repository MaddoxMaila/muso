datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// datasource db {
//   provider = "sqlite"
//   url      = "file:./dev.db"
// }

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["referentialActions"]
}

// all models
model Admin {
  id         String   @id @default(uuid())
  name       String   
  email      String   @unique
  password   String
  created_at DateTime @default(now())

  Track         Track[]
  playlist      Playlist[]
  likedTracks   LikedTracks[]

  @@map("admin")
}


model Track {
  id          String    @id @default(uuid())
  name        String    
  album       String    
  artist      String    
  duration    Int
  year        Int
  artwork     String    
  audio       String    
  created_at  DateTime  @default(now())

  playlistTracks    PlaylistTracks[]
  likedTracks       LikedTracks[]

  userId      String
  user        Admin     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("track")
}

model Playlist {
  id          String    @id @default(uuid())
  name        String    
  created_at  DateTime  @default(now())

  playlistTracks    PlaylistTracks[]

  userId      String
  user        Admin     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("playlist")
}

model PlaylistTracks {
  id          String    @id @default(uuid())
  created_at  DateTime  @default(now())

  trackId     String
  Track       Track     @relation(fields: [trackId], references: [id], onDelete: Cascade)

  playlistId  String
  Playlist    Playlist  @relation(fields: [playlistId], references: [id], onDelete: Cascade)

  @@map("playlist_track")
}

model LikedTracks {
  id          String    @id @default(uuid())
  trackUserId String    @unique

  trackId     String
  Track       Track     @relation(fields: [trackId], references: [id], onDelete: Cascade)

  userId      String
  user        Admin     @relation(fields: [userId], references: [id], onDelete: Cascade)
}
